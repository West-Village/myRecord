Servlet简介：
  Servlet容器负责Servlet和客户的通信以及调用Servlet的方法，通信采用“请求/响应”的模式
  功能:
    -创建并返回基于客户请求的动态HTML页面
    -创建可嵌入到现有HTML页面中的部分HTML页面（HTML片段）
    -与其他服务器资源（如数据库或基于JAVA的应用程序）进行通信
    
Servlet的HelloWorld
1.创建一个servlet接口的实现类
  public class HelloServlet implements Servlet
2.在web.xml文件中配置和映射这个Servlet
  <!-- 配置Servlet -->
		<servlet>
      <!-- Servlet 注册名-->
			<servlet-name>helloServlet</servlet-name>  
      <!-- Servlet 全类名-->
			<servlet-class>com.ai.HelloServlet</servlet-class>		
		</servlet>
		<!-- 映射Servlet -->
		<servlet-mapping>
			<servlet-name>helloServlet</servlet-name>
      <!-- 映射具体的访问路径-->
			<url-pattern>/hello</url-pattern>
		</servlet-mapping>

Servlet容器：运行Servlet、JSP、Filter等软件环境（Servlet容器可以创建和销毁对象）
1.可以创建servlet并调用Servlet的相关生命周期
2.JSP、Filter、Listener、Tag....
 
Servlet生命周期的方法：以下方法均由Servlet容器负责调用，无需手动调用
1.构造器:只被调用一次，第一次请求servlet时创建servlet的实例，调用构造器(单实例)
2.init方法:只被调用一次，在创建好实例后立即被调用，用于初始化当前Servlet
3.service:被多次调用，每次请求都会调用service方法，实际用于响应请求
4.destory:只被调用一次，用于释放当前Servlet所占用的资源

以下为例：
package com.ai;
import java.io.IOException;
import javax.servlet.Servlet;
import javax.servlet.ServletConfig;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.ServletException;

public class HelloServlet implements Servlet{
	
	@Override
	public void destroy(){
		System.out.println("destory...");
	}
	
	@Override
	public ServletConfig getServletConfig(){
		System.out.println("getServletConfig...");
		return null;
	}

	@Override
	public String getServletInfo(){
		System.out.println("getServletInfo...");
		return null;
	}
	
	@Override
	public void init(ServletConfig arg0) throws ServletException{
		System.out.println("init");
	}
	
	@Override
	public void service(ServletRequest arg0, ServletResponse arg1)
		throws ServletException, IOException{
		System.out.println("service");
	}
	
	public HelloServlet() {
		// TODO Auto-generated method stub
		System.out.println("HelloServlet's constructor");
	}
	
		
	}
	
结果：
HelloServlet's constructor
init
service
service
service
service
destory(关闭tomcat)
