Servlet简介：
  Servlet容器负责Servlet和客户的通信以及调用Servlet的方法，通信采用“请求/响应”的模式
  功能:
    -创建并返回基于客户请求的动态HTML页面
    -创建可嵌入到现有HTML页面中的部分HTML页面（HTML片段）
    -与其他服务器资源（如数据库或基于JAVA的应用程序）进行通信
-------------------------------------------------------------------------------------------------------------   
Servlet的HelloWorld
1.创建一个servlet接口的实现类
  public class HelloServlet implements Servlet
2.在web.xml文件中配置和映射这个Servlet
  <!-- 配置Servlet -->
  	<servlet>
		<!-- Servlet 注册名-->
     		<servlet-name>helloServlet</servlet-name>  
     		<!-- Servlet 全类名-->
		<servlet-class>com.ai.HelloServlet</servlet-class>
		<!-- 可以指定Servlet被创建的时机-->
		<load-on-startup>1</load-on-startup>
	</servlet>
		<!-- 映射Servlet -->
		<servlet-mapping>
		<servlet-name>helloServlet</servlet-name>
      		<!-- 映射具体的访问路径-->
		<url-pattern>/hello</url-pattern>
	</servlet-mapping>
------------------------------------------------------------------------------------------------------------- 

Servlet容器：运行Servlet、JSP、Filter等软件环境（Servlet容器可以创建和销毁对象）
1.可以创建servlet并调用Servlet的相关生命周期
2.JSP、Filter、Listener、Tag....
------------------------------------------------------------------------------------------------------------- 

Servlet生命周期的方法：以下方法均由Servlet容器负责调用，无需手动调用
1.构造器:只被调用一次，第一次请求servlet时创建servlet的实例，调用构造器(单实例)
2.init方法:只被调用一次，在创建好实例后立即被调用，用于初始化当前Servlet
3.service:被多次调用，每次请求都会调用service方法，实际用于响应请求
4.destory:只被调用一次，用于释放当前Servlet所占用的资源
5.<load-on-startup>1</load-on-startup>
配置在servlet节点中，可以指定Servlet被创建的时机，若为负数，则在第一次请求时被创建，若为0或正数则在当前WEB应用被Servlet容器加载是创建实例，
且数值越小越早被创建

以下为例：
package com.ai;
import java.io.IOException;
import javax.servlet.Servlet;
import javax.servlet.ServletConfig;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.ServletException;

public class HelloServlet implements Servlet{
	
	@Override
	public void destroy(){
		System.out.println("destory...");
	}
	
	@Override
	public ServletConfig getServletConfig(){
		System.out.println("getServletConfig...");
		return null;
	}

	@Override
	public String getServletInfo(){
		System.out.println("getServletInfo...");
		return null;
	}
	
	@Override
	public void init(ServletConfig arg0) throws ServletException{
		System.out.println("init");
	}
	
	@Override
	public void service(ServletRequest arg0, ServletResponse arg1)
		throws ServletException, IOException{
		System.out.println("service");
	}
	
	public HelloServlet() {
		// TODO Auto-generated method stub
		System.out.println("HelloServlet's constructor");
	}
	
		
	}
	
结果：
HelloServlet's constructor
init
service
service
service
service
destory(关闭tomcat)
------------------------------------------------------------------------------------------------------------- 

Servlet容器响应客户请求的过程

1.Servlet引擎检查是否已经装载并创建了该Servlet的实例对象，若是直接执行第4步，如果不是则执行第2步
2.装载并创建该Servlet的一个实例对象：调用该Servlet的构造器
3.调用Servlet实例对象的init()方法对Servlet对象进行初始化
4.创建一个用于封装请求的ServletRequest对象和一个代表响应ServletResponse对象，然后调用Servlet的service()方法并将请求和响应对象作为参数传递
5.WEB应用程序被停止或重新启动之前，Servlet引擎将卸载Servlet，并在卸载之前调用Servlet的destory()方法
------------------------------------------------------------------------------------------------------------- 

Servlet映射的细节
1.同一个Servlet可以被映射到多个URL上，/hello和/hello2都可以访问Servlet
</servlet>
	<!-- 映射Servlet -->
	<servlet-mapping>
	<servlet-name>helloServlet</servlet-name>
      	<!-- 映射具体的访问路径-->
	<url-pattern>/hello</url-pattern>
</servlet-mapping>
</servlet>
	<!-- 映射Servlet -->
	<servlet-mapping>
	<servlet-name>helloServlet</servlet-name>
      	<!-- 映射具体的访问路径-->
	<url-pattern>/hello2</url-pattern>
</servlet-mapping>

2.可以使用通配符,*.html和/*这种格式才合法
</servlet>
	<servlet-mapping>
		<servlet-name>helloServlet</servlet-name>
		<url-pattern>*.html</url-pattern>
</servlet-mapping>
------------------------------------------------------------------------------------------------------------- 

ServletConfig:
封装了Servlet配置信息并且可以获取ServletContext对象
Method Summary:
getInitParameter(String name)  //根据名字获取初始化参数值
getInitParameterNames()      //获取参数名字  返回enumerate值 例：Enumeration<String> names = servletConfig.getInitParameterNames();
getServletContext()
getServletName()         //获取servlet名称   

格式：（必须在<load-on-startup>1</load-on-startup>之上）
<!-- 配置Servlet的初始化参数 -->
<init-param>
	<!-- 参数名 -->
	<param-name>user</param-name>
	<!-- 参数值 -->
	<param-value>root</param-value>
 </init-param>
 ------------------------------------------------------------------------------------------------------------- 

ServletContext:（相当于全局参数，而<init-param>为servlet的初始化参数为局部参数）
1.可以有ServletConfig获取
2.该对象代表当前WEB应用：可以认为是当前WEb应用的大管家，可以获取当前WEB应用的各种信息
web.xml配置:
<!-- 配置当前WEB应用的初始化参数 -->
<context-param>
	<param-name>driver</param-name>
	<param-value>com.mysql.jdbc.Driver</param-value>
</context-param>	
代码实现：
@Override
public void init(ServletConfig servletconfig) throws ServletException{
	System.out.println("init");
	//获取ServletContext对象
	ServletContext servletContext = servletconfig.getServletContext();
	String dirver = servletContext.getInitParameter("driver");
	System.out.println("driver："+dirver);

	Enumeration<String> names = servletContext.getInitParameterNames();
	While(names.hasMoreElements());{
		String name = names.nextElement();
		System.out.println("-->"+name);
	}
}
 ------------------------------------------------------------------------------------------------------------- 
 
 获取当前WEB应用资源在服务器上的绝对路径，
 Method: getRealPath(String path)
 String realPath = servletContext.getRealPath("/index.jsp");
 
 获取当前WEb应用的名称
 Method: getContextPath()
 
 获取当前WEB应用的某一文件对应的输入流
 Method: getResourceAsStream(String path): path的/为相对于当前WEB应用的根目录
 InputStream is = servletContext.getResourceAsStream("/WEB-INFO/classes/jdbc.properties");
 
